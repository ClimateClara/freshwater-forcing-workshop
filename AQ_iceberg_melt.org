
* Table of contents                               :toc_3:noexport:
- [[#introduction][Introduction]]
  - [[#data][Data]]
    - [[#printout][Printout]]
    - [[#information][Information]]
    - [[#figure][Figure]]
- [[#processing][Processing]]
  - [[#netcdf][NetCDF]]

* Introduction

+ Data from Nico Jourdain processed from Mathiot (2023)
+ Rework to match other products generated for the Schmidt freshwater paper

** Data

*** Printout

#+BEGIN_SRC jupyter-python :exports results :prologue "import xarray as xr" :display text/plain
xr.open_dataset('./dat/AQ_iceberg_melt.nc')
#+END_SRC

#+RESULTS:
#+begin_example
<xarray.Dataset> Size: 238MB
Dimensions:      (time: 12, region: 18, latitude: 360, longitude: 720)
Coordinates:
  ,* longitude    (longitude) float64 6kB -179.8 -179.2 -178.8 ... 179.2 179.8
  ,* latitude     (latitude) float64 3kB -89.75 -89.25 -88.75 ... 89.25 89.75
  ,* region       (region) int32 72B 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
  ,* time         (time) int8 12B 1 2 3 4 5 6 7 8 9 10 11 12
    spatial_ref  int8 1B ...
Data variables:
    melt         (time, region, latitude, longitude) float32 224MB ...
    melt_AQ      (time, latitude, longitude) float32 12MB ...
    msk_nemo     (latitude, longitude) float32 1MB ...
    region_name  (region) <U5 360B ...
    region_map   (latitude, longitude) int16 518kB ...
Attributes: (12/13)
    description:         Annual JRA55 climatology
    original_data:       NEMO 0.25Â° simulations by Anna Olive-Abello (in prep...
    script_used:         remap_per_basin.py
    processed_by:        Nicolas Jourdain <nicolas.jourdain@univ-grenoble-alp...
    geospatial_lat_min:  -89.75
    geospatial_lat_max:  89.75
    ...                  ...
    geospatial_lon_max:  179.75
    date_created:        20241117T141200Z
    title:               Normalised iceberg melt climatology in the Southern ...
    history:             Processed for Schmidt (YYYY; in prep); by Ken Mankoff
    Conventions:         CF-1.8
    DOI:                 https://doi.org/10.5281/zenodo.14020895
#+end_example

*** Information

#+BEGIN_QUOTE
[!WARNING]
The highest melt rates (largest meltwater injection) occurs in near-coastal cells. If your model has land covering some of these cells, you may lose large melt inputs. Rescaling the melt so melt*area sums to 1 for your ocean is a good idea, but this also redistributes the largest melt points over the entire melt region. It may be better to re-scale the melt by increasing only the largest cell or largest few cells (which are hopefully nearby the coast and the high melt rate cells that were covered by land)
#+END_QUOTE

*** Figure

#+begin_src jupyter-python :exports results :file ./fig/AQ_berg_melt.png
import rioxarray as rio
import xarray as xr
import numpy as np
import cartopy.crs as ccrs
from cartopy.feature import ShapelyFeature
import matplotlib.pyplot as plt
import geopandas as gpd
from tqdm import tqdm

gdf = gpd.read_file('~/data/IMBIE/Rignot/ANT_Basins_IMBIE2_v1.6.shp')
gdf['geometry'] = gdf['geometry'].simplify(100000)
gdf = gdf.set_index('Subregion').drop(columns='Regions')

ds = xr.open_dataset('dat/AQ_iceberg_melt.nc')
ds = ds.rio.write_crs('EPSG:3031')
ds = ds.sel({'latitude':slice(-90,-40)}, drop=True)

llon,llat = np.meshgrid(ds['longitude'].values, ds['latitude'].values)
earth_rad = 6.371e6 # Earth radius in m
resdeg = 0.5 # output grid resolution in degrees
cell_area = np.cos(np.deg2rad(llat)) * earth_rad**2 * np.deg2rad(resdeg)**2
ds['area'] = (('latitude','longitude'), cell_area)
ds['melt'] = ds['melt'] / ds['melt'].sum() * ds['area']

proj = ccrs.Stereographic(central_latitude=-90, central_longitude=0)
gdf = gdf.to_crs(proj.proj4_init)

f, axs = plt.subplots(19, 13,
                      figsize=(19*3, 13*3),
                      subplot_kw={"projection": proj})

mmin = np.nanpercentile(ds['melt'].where(ds['melt'] != 0).values, 5)
mmax = np.nanpercentile(ds['melt'].where(ds['melt'] != 0).values, 95)
roi_name = ds['region_name'].values

for roi in tqdm(range(19)):
    for time in range(13):
        ax = axs[roi,time]

        title = ''
        ylabel = ''
        if (time < 12) and (roi < 18):
            data = ds['melt'].isel({'region':roi, 'time':time})
            if roi == 0:
                if time == 0: title = 'Month: '
                title = title + f"{time+1}"
            if time == 0: ylabel = f"{roi_name[roi]} [{roi+1}]"
        elif (time == 12) and (roi < 18):
            data = ds['melt'].mean(dim='time').isel({'region':roi})
            if roi == 0: title = f"Annual"
        elif (time < 12) and (roi == 18):
            data = ds['melt'].mean(dim='region').isel({'time':time})
            if time == 0: ylabel = 'All'
        elif (time == 12) and (roi == 18):
            data = ds['melt'].mean(dim=['region','time'])
        else: # should not be here
            assert(False)

        data = np.log10(data.where(data != 0))
        p = data.plot(ax=ax,
                      add_colorbar = False,
                      vmin = np.log10(mmin),
                      vmax = np.log10(mmax),
                      transform = ccrs.PlateCarree())
        
        ax.coastlines()
        ax.set_extent([-180,180,-90,-50], crs=ccrs.PlateCarree())

        ax.set_title(title)
        # ax.set_ylabel(ylabel)
        ax.text(-0.07, 0.55, ylabel, va='center', ha='center',
                rotation='vertical', rotation_mode='anchor',
                transform=ax.transAxes)

        gdf.boundary.plot(ax=ax, color='k', linewidth=1)
        if roi < 18:
            geom = gdf.loc[roi_name[roi]]['geometry']
            ax.add_geometries(geom, crs=proj, facecolor='k', edgecolor='k', alpha=0.33)
        if (roi == 18):
            gdf.plot(ax=ax, color='k', facecolor='k', linewidth=1, alpha=0.33)

        
plt.subplots_adjust(wspace=-0.935, hspace=0.1)
#+end_src

#+RESULTS:
:RESULTS:
: 100% 19/19 [29:50<00:00, 94.22s/it] 
[[./fig/AQ_berg_melt.png]]
:END:


* Processing

** NetCDF

#+begin_src jupyter-python :exports both :session Mathiot_2023
import rioxarray as rxr
import rasterio as rio
import xarray as xr
import numpy as np
import datetime

ds = xr.open_dataset('~/data/Mathiot_2023/iceberg_melt_pattern_SH_per_basin.nc')

# add projection metadata
ds = ds.rio.write_crs('epsg:4326') # create ds['spatial_ref']
ds = ds.rio.set_spatial_dims(x_dim='longitude', y_dim='latitude') # or ('lon','lat') and only maybe needed
ds['spatial_ref'] = ds['spatial_ref'].astype(np.byte)

# provide cell center values at all coordinates
ds = ds.pad(latitude=(0, 1), longitude=(0,1))  # Add one column at the end
ds['latitude'] = np.linspace(-89.75, 89.75, num=360)
ds['longitude'] = np.linspace(-179.75, 179.75, num=720)

ds['time'] = (('time'), np.arange(12).astype(np.int8)+1)

# Rignot basins are 1 through 18, not 0 through 17
ds = ds.rename({'basin':'region'})
ds['region'] = (ds['region'] + 1).astype(np.int32)

ds['region_name'] = (('region'), ['A-Ap', 'Ap-B', 'B-C', 'C-Cp', 'Cp-D',
                                  'D-Dp', 'Dp-E', 'E-Ep', 'Ep-F', 'F-G',
                                  'G-H', 'H-Hp', 'Hp-I', 'I-Ipp', 'Ipp-J',
                                  'J-Jpp', 'Jpp-K', 'K-A'])

ds.attrs['description'] = 'Annual JRA55 climatology'

ds = ds.rename_vars({'pattern_SH':'melt',
                     'pattern_SH_allbasins':'melt_AQ'})

ds['melt'].attrs['units'] = 'm-2'
ds['melt'].attrs['grid_mapping'] = 'spatial_ref'
ds['melt'].attrs['standard_name'] = 'water_flux_into_sea_water_from_icebergs'
ds['melt'].attrs['long_name'] = 'Normalised iceberg melt climatology per region of calving'

ds['melt_AQ'].attrs['units'] = 'm-2'
ds['melt_AQ'].attrs['grid_mapping'] = 'spatial_ref'
ds['melt_AQ'].attrs['standard_name'] = 'water_flux_into_sea_water_from_icebergs'
ds['melt_AQ'].attrs['long_name'] = 'Normalised iceberg melt climatology for all Greenland'

rt = rio.open('./tmp/regions.tif').read(1)[::-1,:]
rt[rt < 0] = 0
ds['region_map'] = (('latitude','longitude'), rt)

# # apply a spatial smooth to the iceberg track
# area = rio.open('./tmp/area.tif').read(1)[::-1,:]
# # (area * ds['melt']).sum(dim=['longitude','latitude']) # sums to 1

# for v in ['melt','melt_AQ']:
#     vs = v+'_smooth'
#     ds[vs] = ds[v].fillna(0).rolling(longitude=3, latitude=3, center=True).mean()
#     ds[vs] = ds[vs].where(~np.isnan(ds['region_map']), 0)
#     roi_sum = ds[vs].sum(dim=['longitude','latitude'])
#     ds[vs] = ds[vs] / roi_sum / area

ds['spatial_ref'].attrs['horizontal_datum_name'] = 'WGS 84'
ds['region'].attrs['long_name'] = 'Region IDs'
ds['time'].attrs['standard_name'] = 'time'
ds['longitude'].attrs['standard_name'] = 'longitude'
ds['longitude'].attrs['long_name'] = 'longitude'
ds['longitude'].attrs['axis'] = 'X'
ds['longitude'].attrs['units'] = 'degrees_east'
ds['latitude'].attrs['standard_name'] = 'latitude'
ds['latitude'].attrs['long_name'] = 'latitude'
ds['latitude'].attrs['axis'] = 'Y'
ds['latitude'].attrs['units'] = 'degrees_north'
ds['region_map'].attrs['long_name'] = 'IMBIE regions'
ds['region_name'].attrs['long_name'] = 'IMBIE regions'
ds['region_name'].attrs['standard_name'] = 'region'

ds.attrs['geospatial_lat_min'] = ds['latitude'].values.min()
ds.attrs['geospatial_lat_max'] = ds['latitude'].values.max()
ds.attrs['geospatial_lon_min'] = ds['longitude'].values.min()
ds.attrs['geospatial_lon_max'] = ds['longitude'].values.max()
ds.attrs['date_created'] = datetime.datetime.now(datetime.timezone.utc).strftime("%Y%m%dT%H%M%SZ")
ds.attrs['title'] = 'Normalised iceberg melt climatology in the Southern Hemisphere per month and region of calving'
ds.attrs['history'] = 'Processed for Schmidt (YYYY; in prep); by Ken Mankoff'
ds.attrs['Conventions'] = 'CF-1.8'
ds.attrs['DOI'] = 'https://doi.org/10.5281/zenodo.14020895'

comp = dict(zlib=True, complevel=5)
encoding = {var: comp for var in ds.drop_vars(['region_name']).data_vars}

!rm ./dat/AQ_iceberg_melt.nc
ds.to_netcdf('./dat/AQ_iceberg_melt.nc', encoding=encoding)
!ncdump -h ./dat/AQ_iceberg_melt.nc
#+end_src

#+RESULTS:
#+begin_example
netcdf AQ_iceberg_melt {
dimensions:
	time = UNLIMITED ; // (12 currently)
	region = 18 ;
	latitude = 360 ;
	longitude = 720 ;
variables:
	float melt(time, region, latitude, longitude) ;
		melt:_FillValue = NaNf ;
		melt:long_name = "Normalised iceberg melt climatology per region of calving" ;
		melt:units = "m-2" ;
		melt:grid_mapping = "spatial_ref" ;
		melt:standard_name = "water_flux_into_sea_water_from_icebergs" ;
		melt:coordinates = "spatial_ref" ;
	float melt_AQ(time, latitude, longitude) ;
		melt_AQ:_FillValue = NaNf ;
		melt_AQ:long_name = "Normalised iceberg melt climatology for all Greenland" ;
		melt_AQ:units = "m-2" ;
		melt_AQ:grid_mapping = "spatial_ref" ;
		melt_AQ:standard_name = "water_flux_into_sea_water_from_icebergs" ;
		melt_AQ:coordinates = "spatial_ref" ;
	float msk_nemo(latitude, longitude) ;
		msk_nemo:_FillValue = NaNf ;
		msk_nemo:long_name = "Original land/sea mask in the NEMO simulation" ;
		msk_nemo:coordinates = "spatial_ref" ;
	double longitude(longitude) ;
		longitude:_FillValue = NaN ;
		longitude:standard_name = "longitude" ;
		longitude:long_name = "longitude" ;
		longitude:axis = "X" ;
		longitude:units = "degrees_east" ;
	double latitude(latitude) ;
		latitude:_FillValue = NaN ;
		latitude:standard_name = "latitude" ;
		latitude:long_name = "latitude" ;
		latitude:axis = "Y" ;
		latitude:units = "degrees_north" ;
	int region(region) ;
		region:long_name = "Region IDs" ;
	byte time(time) ;
		time:standard_name = "time" ;
	byte spatial_ref ;
		spatial_ref:crs_wkt = "GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]" ;
		spatial_ref:semi_major_axis = 6378137. ;
		spatial_ref:semi_minor_axis = 6356752.31424518 ;
		spatial_ref:inverse_flattening = 298.257223563 ;
		spatial_ref:reference_ellipsoid_name = "WGS 84" ;
		spatial_ref:longitude_of_prime_meridian = 0. ;
		spatial_ref:prime_meridian_name = "Greenwich" ;
		spatial_ref:geographic_crs_name = "WGS 84" ;
		spatial_ref:grid_mapping_name = "latitude_longitude" ;
		spatial_ref:spatial_ref = "GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]" ;
		spatial_ref:horizontal_datum_name = "WGS 84" ;
	string region_name(region) ;
		region_name:long_name = "IMBIE regions" ;
		region_name:standard_name = "region" ;
		region_name:coordinates = "spatial_ref" ;
	short region_map(latitude, longitude) ;
		region_map:long_name = "IMBIE regions" ;
		region_map:coordinates = "spatial_ref" ;

// global attributes:
		:description = "Annual JRA55 climatology" ;
		string :original_data = "NEMO 0.25Â° simulations by Anna Olive-Abello (in preparation)" ;
		:script_used = "remap_per_basin.py" ;
		:processed_by = "Nicolas Jourdain <nicolas.jourdain@univ-grenoble-alpes.fr>" ;
		:geospatial_lat_min = -89.75 ;
		:geospatial_lat_max = 89.75 ;
		:geospatial_lon_min = -179.75 ;
		:geospatial_lon_max = 179.75 ;
		:date_created = "20241117T141200Z" ;
		:title = "Normalised iceberg melt climatology in the Southern Hemisphere per month and region of calving" ;
		:history = "Processed for Schmidt (YYYY; in prep); by Ken Mankoff" ;
		:Conventions = "CF-1.8" ;
		:DOI = "https://doi.org/10.5281/zenodo.14020895" ;
}
#+end_example


